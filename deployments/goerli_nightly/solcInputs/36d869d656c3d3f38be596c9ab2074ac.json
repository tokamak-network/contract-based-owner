{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/MultiProposerableTransactionExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface ITransferOwnership {\n    function transferOwnership(address _owner) external;\n}\n\ncontract MultiProposerableTransactionExecutor is Ownable {\n    event Deposit(address indexed sender, uint256 amount, uint256 balance);\n    event ProposeTransaction(\n        address indexed transactionProposer,\n        uint256 indexed txIndex,\n        address indexed to,\n        bytes data\n    );\n    event ExecuteTransaction(address indexed owner, uint256 indexed txIndex);\n    event ExecuteTransactionFailed(\n        address indexed owner,\n        uint256 indexed txIndex\n    );\n    event TransferTargetOwnership(address target, address owner);\n    event AddTransactionProposer(address transactionProposer);\n    event RemoveTransactionProposer(address transactionProposer);\n\n    address[] public transactionProposers;\n    mapping(address => bool) public isTransactionProposer;\n\n    struct Transaction {\n        address to;\n        bytes data;\n        bool executed;\n        bool failed;\n    }\n\n    Transaction[] public transactions;\n\n    function addTransactionProposer(\n        address _transactionProposer\n    ) public onlyOwner {\n        require(\n            _transactionProposer != address(0) &&\n                isTransactionProposer[_transactionProposer] == false &&\n                owner() != _transactionProposer,\n            \"is already exist in transactionProposers or is the owner\"\n        );\n        isTransactionProposer[_transactionProposer] = true;\n        transactionProposers.push(_transactionProposer);\n\n        emit AddTransactionProposer(_transactionProposer);\n    }\n\n    function removeTransactionProposer(\n        address _transactionProposer\n    ) public onlyOwner {\n        require(\n            isTransactionProposer[_transactionProposer] == true,\n            \"is not exist in transactionProposers\"\n        );\n        isTransactionProposer[_transactionProposer] = false;\n\n        for (uint256 i = 0; i < transactionProposers.length - 1; i++) {\n            if (transactionProposers[i] == _transactionProposer) {\n                transactionProposers[i] = transactionProposers[\n                    transactionProposers.length - 1\n                ];\n                break;\n            }\n        }\n        transactionProposers.pop();\n\n        emit RemoveTransactionProposer(_transactionProposer);\n    }\n\n    function proposeTransaction(address _to, bytes memory _data) public {\n        require(\n            owner() == msg.sender || isTransactionProposer[msg.sender],\n            \"not owner or not transactionProposer\"\n        );\n\n        require(_to != address(0), \"_to can't be zero address\");\n        require(_data.length != 0, \"_data must be exist\");\n\n        uint256 txIndex = transactions.length;\n\n        transactions.push(\n            Transaction({to: _to, data: _data, executed: false, failed: false})\n        );\n\n        emit ProposeTransaction(msg.sender, txIndex, _to, _data);\n    }\n\n    function executeTransaction(uint256 _txIndex) public onlyOwner {\n        require(_txIndex < transactions.length, \"tx does not exist\");\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n\n        Transaction storage transaction = transactions[_txIndex];\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call(transaction.data);\n        if (!success) {\n            transaction.failed = true;\n            emit ExecuteTransactionFailed(msg.sender, _txIndex);\n            revert(\"tx failed\");\n        }\n\n        transaction.failed = false;\n        emit ExecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function transferTargetOwnership(\n        address _target,\n        address _owner\n    ) public onlyOwner {\n        require(_owner != address(0), \"_owner can't be 0\");\n\n        ITransferOwnership target = ITransferOwnership(_target);\n\n        target.transferOwnership(_owner);\n\n        emit TransferTargetOwnership(_target, _owner);\n    }\n\n    function getTransactionProposers() public view returns (address[] memory) {\n        return transactionProposers;\n    }\n\n    function getTransactionCount() public view returns (uint256) {\n        return transactions.length;\n    }\n\n    function getTransaction(\n        uint256 _txIndex\n    )\n        public\n        view\n        returns (address to, bytes memory data, bool executed, bool failed)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.data,\n            transaction.executed,\n            transaction.failed\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}